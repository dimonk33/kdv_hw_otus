// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: EventService.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Events_CreateEvent_FullMethodName      = "/event.Events/CreateEvent"
	Events_UpdateEvent_FullMethodName      = "/event.Events/UpdateEvent"
	Events_DeleteEvent_FullMethodName      = "/event.Events/DeleteEvent"
	Events_ListEventOnDate_FullMethodName  = "/event.Events/ListEventOnDate"
	Events_ListEventOnWeek_FullMethodName  = "/event.Events/ListEventOnWeek"
	Events_ListEventOnMonth_FullMethodName = "/event.Events/ListEventOnMonth"
)

// EventsClient is the client API for Events service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventsClient interface {
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResult, error)
	UpdateEvent(ctx context.Context, in *UpdateEventRequest, opts ...grpc.CallOption) (*UpdateEventResult, error)
	DeleteEvent(ctx context.Context, in *DeleteEventRequest, opts ...grpc.CallOption) (*DeleteEventResult, error)
	ListEventOnDate(ctx context.Context, in *ListEventOnDateRequest, opts ...grpc.CallOption) (*ListEventOnDateResult, error)
	ListEventOnWeek(ctx context.Context, in *ListEventOnWeekRequest, opts ...grpc.CallOption) (*ListEventOnWeekResult, error)
	ListEventOnMonth(ctx context.Context, in *ListEventOnMonthRequest, opts ...grpc.CallOption) (*ListEventOnMonthResult, error)
}

type eventsClient struct {
	cc grpc.ClientConnInterface
}

func NewEventsClient(cc grpc.ClientConnInterface) EventsClient {
	return &eventsClient{cc}
}

func (c *eventsClient) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResult, error) {
	out := new(CreateEventResult)
	err := c.cc.Invoke(ctx, Events_CreateEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) UpdateEvent(ctx context.Context, in *UpdateEventRequest, opts ...grpc.CallOption) (*UpdateEventResult, error) {
	out := new(UpdateEventResult)
	err := c.cc.Invoke(ctx, Events_UpdateEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) DeleteEvent(ctx context.Context, in *DeleteEventRequest, opts ...grpc.CallOption) (*DeleteEventResult, error) {
	out := new(DeleteEventResult)
	err := c.cc.Invoke(ctx, Events_DeleteEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) ListEventOnDate(ctx context.Context, in *ListEventOnDateRequest, opts ...grpc.CallOption) (*ListEventOnDateResult, error) {
	out := new(ListEventOnDateResult)
	err := c.cc.Invoke(ctx, Events_ListEventOnDate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) ListEventOnWeek(ctx context.Context, in *ListEventOnWeekRequest, opts ...grpc.CallOption) (*ListEventOnWeekResult, error) {
	out := new(ListEventOnWeekResult)
	err := c.cc.Invoke(ctx, Events_ListEventOnWeek_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) ListEventOnMonth(ctx context.Context, in *ListEventOnMonthRequest, opts ...grpc.CallOption) (*ListEventOnMonthResult, error) {
	out := new(ListEventOnMonthResult)
	err := c.cc.Invoke(ctx, Events_ListEventOnMonth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventsServer is the server API for Events service.
// All implementations must embed UnimplementedEventsServer
// for forward compatibility
type EventsServer interface {
	CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResult, error)
	UpdateEvent(context.Context, *UpdateEventRequest) (*UpdateEventResult, error)
	DeleteEvent(context.Context, *DeleteEventRequest) (*DeleteEventResult, error)
	ListEventOnDate(context.Context, *ListEventOnDateRequest) (*ListEventOnDateResult, error)
	ListEventOnWeek(context.Context, *ListEventOnWeekRequest) (*ListEventOnWeekResult, error)
	ListEventOnMonth(context.Context, *ListEventOnMonthRequest) (*ListEventOnMonthResult, error)
	mustEmbedUnimplementedEventsServer()
}

// UnimplementedEventsServer must be embedded to have forward compatible implementations.
type UnimplementedEventsServer struct {
}

func (UnimplementedEventsServer) CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedEventsServer) UpdateEvent(context.Context, *UpdateEventRequest) (*UpdateEventResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}
func (UnimplementedEventsServer) DeleteEvent(context.Context, *DeleteEventRequest) (*DeleteEventResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (UnimplementedEventsServer) ListEventOnDate(context.Context, *ListEventOnDateRequest) (*ListEventOnDateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventOnDate not implemented")
}
func (UnimplementedEventsServer) ListEventOnWeek(context.Context, *ListEventOnWeekRequest) (*ListEventOnWeekResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventOnWeek not implemented")
}
func (UnimplementedEventsServer) ListEventOnMonth(context.Context, *ListEventOnMonthRequest) (*ListEventOnMonthResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventOnMonth not implemented")
}
func (UnimplementedEventsServer) mustEmbedUnimplementedEventsServer() {}

// UnsafeEventsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventsServer will
// result in compilation errors.
type UnsafeEventsServer interface {
	mustEmbedUnimplementedEventsServer()
}

func RegisterEventsServer(s grpc.ServiceRegistrar, srv EventsServer) {
	s.RegisterService(&Events_ServiceDesc, srv)
}

func _Events_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_CreateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).CreateEvent(ctx, req.(*CreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_UpdateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).UpdateEvent(ctx, req.(*UpdateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_DeleteEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).DeleteEvent(ctx, req.(*DeleteEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_ListEventOnDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventOnDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).ListEventOnDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_ListEventOnDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).ListEventOnDate(ctx, req.(*ListEventOnDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_ListEventOnWeek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventOnWeekRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).ListEventOnWeek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_ListEventOnWeek_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).ListEventOnWeek(ctx, req.(*ListEventOnWeekRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_ListEventOnMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventOnMonthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).ListEventOnMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_ListEventOnMonth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).ListEventOnMonth(ctx, req.(*ListEventOnMonthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Events_ServiceDesc is the grpc.ServiceDesc for Events service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Events_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.Events",
	HandlerType: (*EventsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEvent",
			Handler:    _Events_CreateEvent_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _Events_UpdateEvent_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _Events_DeleteEvent_Handler,
		},
		{
			MethodName: "ListEventOnDate",
			Handler:    _Events_ListEventOnDate_Handler,
		},
		{
			MethodName: "ListEventOnWeek",
			Handler:    _Events_ListEventOnWeek_Handler,
		},
		{
			MethodName: "ListEventOnMonth",
			Handler:    _Events_ListEventOnMonth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "EventService.proto",
}
